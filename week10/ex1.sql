DROP TABLE IF EXISTS accounts;

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    credit DEC(15,2) NOT NULL,
    currency varchar(20) NOT NULL,
    PRIMARY KEY(id)
);

INSERT INTO accounts(name,credit, currency)
VALUES('Nikolina1',1000, 'RUB');

INSERT INTO accounts(name,credit, currency)
VALUES('Nikolina2',1000, 'RUB');

INSERT INTO accounts(name,credit, currency)
VALUES('Nikolina3',1000, 'RUB');

-- create transaction t1
Begin TRANSACTION ;

-- retrieve 500 rubles from account 1
UPDATE accounts
SET credit = credit - 500
where id = 1;

-- send them to account 2
UPDATE accounts
SET credit = credit + 500
where id = 3;

-- commit transaction t1
SAVEPOINT t1;

-- start commit t2
Begin TRANSACTION;

-- retrieve 700 rubles from account 2
UPDATE accounts
SET credit = credit - 700
where id = 2;

-- send them to account 2
UPDATE accounts
SET credit = credit + 700
where id = 1;

SAVEPOINT t2;


-- begin transaction t3
BEGIN TRANSACTION ;

-- retrieve 500 rubles from account 2
UPDATE accounts
SET credit = credit - 100
where id = 2;
-- send them to account 2

UPDATE accounts
SET credit = credit + 100
where id = 3;

SAVEPOINT t3;

-- this roll back does not change anything
ROLLBACK to savepoint t3;
SELECT * from accounts;

-- return to the state before the 3rd transaction
ROLLBACK to savepoint t2;
SELECT * from accounts;

-- return to the state before the 2nd transaction
ROLLBACK  to savepoint t1;
SELECT * from accounts;

-- -- return to the state before the 3rd transaction
ROLLBACK;

SELECT * from accounts;

COMMIT;

-- add the bank name to the table
ALTER TABLE accounts ADD BankName varchar(50);

UPDATE  accounts
SET BankName = 'SberBank'
WHERE id = 1 or id = 3;

UPDATE accounts
SET BankName = 'Tinkoff'
WHERE id = 2;

-- create a record to store fees for SberBank
INSERT INTO accounts(name,credit, currency, BankName)
VALUES('SberBankFees',0 , 'RUB', 'SberBank');


-- create a record to store fees for Tinkoff
INSERT INTO accounts(name, credit, currency, BankName)
VALUES('TinkoffFees', 0, 'RUB', 'Tinkoff');


CREATE OR REPLACE FUNCTION bank_transaction(from_id int, to_id int, amount int) RETURNS VOID
AS $$
DECLARE
    from_bank_name varchar;
    to_bank_name varchar;
BEGIN
    -- store the bank names in variables
    SELECT BankName into from_bank_name FROM accounts where id = from_id;
    SELECT BankName into to_bank_name FROM accounts where id = to_id;

    -- transfer the money without considering the fees
    UPDATE accounts
    SET credit = credit - amount
    where id = from_id;

    UPDATE accounts
    SET credit = credit + amount
    where id = to_id;

    -- apply exterior fees if the banks are different
    if from_bank_name <> to_bank_name THEN
        -- reduce the fee value from the sender
        UPDATE accounts
        SET credit = credit - 30
        where id = from_id;
        -- add to the corresponding bank account
        UPDATE accounts
        set credit = credit + 30
        where lower(name) Like lower(concat(from_bank_name, 'Fees'));
    end if;

    END
$$

LANGUAGE 'plpgsql';

SELECT * from accounts;


-- apply the bank transaction with SQL transactions

-- create transaction t1
Begin TRANSACTION ;

SELECT bank_transaction(1, 3, 500);

SAVEPOINT t21;

-- start commit t2
Begin TRANSACTION;

SELECT bank_transaction(2, 1, 700);
SAVEPOINT t22;


-- begin transaction t3
BEGIN TRANSACTION ;
SELECT  bank_transaction(2, 3, 100);
SAVEPOINT t23;

-- this roll back does not change anything
ROLLBACK to savepoint t23;
SELECT * from accounts;

-- return to the state before the 3rd transaction
ROLLBACK to savepoint t22;
SELECT * from accounts;

-- return to the state before the 2nd transaction
ROLLBACK  to savepoint t21;
SELECT * from accounts;

-- -- return to the state before the 3rd transaction
ROLLBACK;

SELECT * from accounts;

COMMIT;

-- EX1 PART3

DROP TABLE IF EXISTS LEDGER;

CREATE TABLE LEDGER(
    id INT ,
    from_id INT NOT NULL,
    to_id INT NOT NULL,
    amount DEC(15,2) NOT NULL,
    FEE DEC(15,2) NOT NULL,
    transaction_time timestamp,
    PRIMARY KEY(id),
    FOREIGN KEY (from_id) references accounts(id) ON DELETE CASCADE,
    FOREIGN KEY (from_id) references accounts(id) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION save_bank_transaction(sender_id int, receiver_id int, transfer int) RETURNS VOID
AS $$
DECLARE
    from_bank_name varchar;
    to_bank_name varchar;
    -- variable to store the transaction's time
    time timestamp := now();
    new_id int;
BEGIN
    -- store the bank names in variables
    SELECT BankName into from_bank_name FROM accounts where id = sender_id;
    SELECT BankName into to_bank_name FROM accounts where id = receiver_id;
    SELECT COUNT(*) + 1 into new_id FROM LEDGER;

    -- transfer the money without considering the fees
    UPDATE accounts
    SET credit = credit - transfer
    where id = sender_id;

    UPDATE accounts
    SET credit = credit + transfer
    where id = receiver_id;

    -- create a record of the transaction

    INSERT INTO LEDGER(id, from_id, to_id, fee, amount, transaction_time)
    VALUES(new_id, sender_id, receiver_id, 0, transfer, time);

    -- apply exterior fees if the banks are different
    if from_bank_name <> to_bank_name THEN
        -- reduce the fee value from the sender
        UPDATE accounts
        SET credit = credit - 30
        where id = sender_id;
        -- add to the corresponding bank account
        UPDATE accounts
        set credit = credit + 30
        where lower(name) Like lower(concat(from_bank_name, 'Fees'));

        -- set the fee column in the records table to 30
        UPDATE LEDGER
        SET fee = 30
        WHERE id = new_id;
    end if;
    END
$$

LANGUAGE 'plpgsql';

-- create transaction t1
Begin TRANSACTION ;

SELECT save_bank_transaction(1, 3, 500);

SAVEPOINT t21;

-- start commit t2
Begin TRANSACTION;

SELECT save_bank_transaction(2, 1, 700);
SAVEPOINT t22;


-- begin transaction t3
BEGIN TRANSACTION ;
SELECT  save_bank_transaction(2, 3, 100);
SAVEPOINT t23;

-- this roll back does not change anything
ROLLBACK to savepoint t23;
SELECT * from accounts;
SELECT * from LEDGER;

-- return to the state before the 3rd transaction
ROLLBACK to savepoint t22;
SELECT * from accounts;
SELECT * from LEDGER;

-- return to the state before the 2nd transaction
ROLLBACK  to savepoint t21;
SELECT * from accounts;
SELECT * from LEDGER;

-- -- return to the state before the 3rd transaction
ROLLBACK;

SELECT * from accounts;
SELECT * from LEDGER;

COMMIT;